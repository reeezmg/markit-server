//////////////////////////////////////////////////////////////////////////////////////////////
// DO NOT MODIFY THIS FILE                                                                  //
// This file is automatically generated by ZenStack CLI and should not be manually updated. //
//////////////////////////////////////////////////////////////////////////////////////////////

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "windows", "debian-openssl-3.0.x"]
}

enum UserRole {
  admin
  user
  accountant
}

enum CompanyType {
  seller
  buyer
}

enum paymentType {
  CREDIT
  CASH
  UPI
  BANK_TRANSFER
  CHEQUE
}

enum PaymentMode {
  CASH
  CARD
  BANK_TRANSFER
  UPI
  CHEQUE
}

enum PaymentStatus {
  PENDING
  APPROVED
  PAID
  REJECTED
  COMPLETED
  FAILED
}

enum OrderType {
  STANDARD
  BOOKING
  TRY_AT_HOME
  BILL
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PACKED
  DELIVERED
  CANCELED
  OUTOFSTOCK
  BOOKED
}

enum TaxType {
  FIXED
  VARIABLE
}

enum PayableStatus {
  PENDING
  PARTIALLY_PAID
  PAID
  CANCELLED
}

enum NotificationType {
  ORDER_RECEIVED
  BILL_CREATED
  PAYMENT_RECEIVED
  EXPENSE_CREATED
  INVENTORY_LOW
  SHIPMENT_SENT
  SYSTEM_ALERT
}

model DistributorCompany {
  distributorId       String               @map("distributor_id")
  companyId           String               @map("company_id")
  distributor         Distributor          @relation(fields: [distributorId], references: [id], onDelete: Cascade)
  company             Company              @relation(fields: [companyId], references: [id], onDelete: Cascade)
  distributorPayments DistributorPayment[]
  distributorCredits  DistributorCredit[]
  purchaseOrders      PurchaseOrder[]

  @@id([distributorId, companyId])
  @@map("distributor_companies")
}

model Company {
  id                  String               @id() @unique() @default(uuid())
  name                String
  storecode           Int                  @unique() @default(autoincrement())
  storeUniqueName     String?              @unique() @map("store_unique_name")
  logo                String?
  description         String?              @default("")
  thankYouNote        String?              @default("") @map("thank_you_note")
  refundPolicy        String?              @default("") @map("refund_policy")
  returnPolicy        String?              @default("") @map("return_policy")
  phone               String?
  currency            String               @default("INR")
  images              String?
  pointsValue         Int                  @default(0) @map("points_value")
  billCounter         Int                  @default(1) @map("bill_counter")
  isTaxIncluded       Boolean              @default(true) @map("is_tax_included")
  isBarcodeIncluded   Boolean              @default(true) @map("is_barcode_included")
  isUserTrackIncluded Boolean              @default(true) @map("is_usertrack_included")
  plan                String               @default("free") @map("plan")
  users               CompanyUser[]
  promoCodes          PromoCode[]
  clients             CompanyClient[]
  products            Product[]
  categories          Category[]
  subcategories       Subcategory[]
  bills               Bill[]
  carts               CartCompanyClient[]
  tokenbills          TokenEntry[]
  accounts            Account[]
  expenseCategories   ExpenseCategory[]
  expenses            Expense[]
  payment             Payment[]
  variants            Variant[]
  purchaseOrders      PurchaseOrder[]
  items               Item[]
  trybuys             Trynbuy[]
  status              Boolean              @default(true)
  type                CompanyType
  pipeline            Pipeline?
  accHolderName       String?              @map("acc_holder_name")
  ifsc                String?
  accountNo           String?              @map("account_no")
  bankName            String?              @map("bank_name")
  gstin               String?
  upiId               String?              @map("upi_id")
  notifications       Notification[]
  address             Address?
  distributor         DistributorCompany[]
  barcodeCounter      Int                  @default(1) @map("barcode_counter")
  likeCompanies       LikeCompanyClient[]
  productinput        Productinput?
  variantinput        Variantinput?

  @@map("companies")
}

model Productinput {
  id          String  @id() @unique() @default(uuid())
  name        Boolean @default(true)
  brand       Boolean @default(true)
  category    Boolean @default(true)
  subcategory Boolean @default(true)
  description Boolean @default(true)
  company     Company @relation(fields: [companyId], references: [id])
  companyId   String  @unique() @map("company_id")

  @@map("product_inputs")
}

model Variantinput {
  id        String  @id() @unique() @default(uuid())
  name      Boolean @default(true)
  code      Boolean @default(true)
  sprice    Boolean @default(true)
  pprice    Boolean @default(true)
  dprice    Boolean @default(true)
  discount  Boolean @default(true)
  qty       Boolean @default(true)
  sizes     Boolean @default(true)
  images    Boolean @default(true)
  button    Boolean @default(true)
  company   Company @relation(fields: [companyId], references: [id])
  companyId String  @unique() @map("company_id")

  @@map("variant_inputs")
}

model Distributor {
  id            String               @id() @unique() @default(uuid())
  name          String
  images        String?
  companies     DistributorCompany[]
  status        Boolean              @default(true)
  accHolderName String?              @map("acc_holder_name")
  ifsc          String?
  accountNo     String?              @map("account_no")
  bankName      String?              @map("bank_name")
  gstin         String?
  upiId         String?              @map("upi_id")
  address       Address?

  @@map("distributors")
}

model PurchaseOrder {
  id                 String              @id() @default(uuid())
  createdAt          DateTime            @default(now()) @map("created_at")
  updatedAt          DateTime            @updatedAt() @map("updated_at")
  products           Product[]
  company            Company             @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId          String              @map("company_id")
  paymentType        paymentType?        @map("payment_type")
  totalAmount        Float               @default(0) @map("total_amount")
  distributorId      String?             @map("distributor_id")
  distributorCompany DistributorCompany? @relation(fields: [distributorId, companyId], references: [distributorId, companyId], onDelete: Cascade)

  @@map("purchase_orders")
}

model DistributorPayment {
  id                 String             @id() @default(uuid())
  createdAt          DateTime           @default(now()) @map("created_at")
  amount             Float
  remarks            String?
  paymentType        paymentType?       @map("payment_type")
  distributorId      String             @map("distributor_id")
  companyId          String             @map("company_id")
  distributorCompany DistributorCompany @relation(fields: [distributorId, companyId], references: [distributorId, companyId], onDelete: Cascade)

  @@map("distributor_payments")
}

model DistributorCredit {
  id                 String             @id() @default(uuid())
  createdAt          DateTime           @default(now()) @map("created_at")
  amount             Float
  remarks            String?
  billNo             String?
  distributorId      String             @map("distributor_id")
  companyId          String             @map("company_id")
  distributorCompany DistributorCompany @relation(fields: [distributorId, companyId], references: [distributorId, companyId], onDelete: Cascade)

  @@map("distributor_credits")
}

model User {
  id            String             @id() @unique() @default(uuid())
  email         String             @unique()
  password      String
  companies     CompanyUser[]
  address       Address?
  notifications Notification[]
  conversations UserConversation[]
  clients       UserClient[]
  image         String?
  cleanup       Boolean            @default(false) @map("cleanup")

  @@map("users")
}

model Client {
  id                 String               @id() @unique() @default(uuid())
  email              String?              @unique()
  name               String
  password           String?
  phone              String               @unique()
  status             Boolean              @default(true)
  pipelineStatus     String               @default("new") @map("pipeline_status")
  companies          CompanyClient[]
  clientPromoCodes   ClientPromoCode[]
  cart               CartCompanyClient[]
  address            Address[]
  bills              Bill[]
  conversations      ClientConversation[]
  users              UserClient[]
  newPipeline        Pipeline?            @relation("PipelineNewClients", fields: [newPipelineId], references: [id])
  newPipelineId      String?              @map("new_pipeline_id")
  prospectPipeline   Pipeline?            @relation("PipelineProspectClients", fields: [prospectPipelineId], references: [id])
  prospectPipelineId String?              @map("prospect_pipeline_id")
  viewingPipeline    Pipeline?            @relation("PipelineViewingClients", fields: [viewingPipelineId], references: [id])
  viewingPipelineId  String?              @map("viewing_pipeline_id")
  rejectPipeline     Pipeline?            @relation("PipelineRejectClients", fields: [rejectPipelineId], references: [id])
  rejectPipelineId   String?              @map("reject_pipeline_id")
  closePipeline      Pipeline?            @relation("PipelineCloseClients", fields: [closePipelineId], references: [id])
  closePipelineId    String?              @map("close_pipeline_id")
  notifications      Notification[]
  likeCompanies      LikeCompanyClient[]
  otp                String?
  otpExpiry          DateTime?
  trynbuys           Trynbuy[]

  @@map("clients")
}

model Pipeline {
  id              String   @id() @unique() @default(uuid())
  company         Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId       String   @unique() @map("company_id")
  newClients      Client[] @relation("PipelineNewClients")
  prospectClients Client[] @relation("PipelineProspectClients")
  viewingClients  Client[] @relation("PipelineViewingClients")
  rejectClients   Client[] @relation("PipelineRejectClients")
  closeClients    Client[] @relation("PipelineCloseClients")

  @@map("pipelines")
}

model Category {
  id                String        @id() @default(uuid())
  createdAt         DateTime      @default(now()) @map("created_at")
  updatedAt         DateTime      @updatedAt() @map("updated_at")
  name              String
  description       String?
  status            Boolean       @default(true)
  image             String?
  company           Company       @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId         String        @map("company_id")
  products          Product[]
  subcategories     Subcategory[]
  entries           Entry[]
  shortCut          String?       @map("short_cut")
  hsn               String?
  taxType           TaxType       @default(FIXED)
  fixedTax          Float?
  thresholdAmount   Float?
  taxBelowThreshold Float?
  taxAboveThreshold Float?
  margin            Float?
  writeId           String?       @default(uuid()) @map("write_id")

  @@map("categories")
}

model Subcategory {
  id          String    @id() @default(uuid())
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt() @map("updated_at")
  name        String
  description String?
  status      Boolean   @default(true)
  image       String?
  company     Company   @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId   String    @map("company_id")
  products    Product[]
  category    Category? @relation(fields: [categoryId], references: [id])
  categoryId  String?   @map("category_id")
  writeId     String?   @default(uuid()) @map("write_id")

  @@map("subcategories")
}

model Product {
  id              String        @id() @default(uuid())
  createdAt       DateTime      @default(now()) @map("created_at")
  updatedAt       DateTime      @updatedAt() @map("updated_at")
  name            String
  brand           String?
  status          Boolean       @default(true)
  rating          Float?
  description     String?
  company         Company       @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId       String        @map("company_id")
  category        Category?     @relation(fields: [categoryId], references: [id])
  categoryId      String?       @map("category_id")
  subcategory     Subcategory?  @relation(fields: [subcategoryId], references: [id])
  subcategoryId   String?       @map("subcategory_id")
  variants        Variant[]
  purchaseorder   PurchaseOrder @relation(fields: [purchaseorderId], references: [id], onDelete: Cascade)
  purchaseorderId String        @map("purchaseorder_id")
  writeId         String?       @default(uuid()) @map("write_id")
  

  @@index([categoryId])
  @@index([subcategoryId])
  @@index([companyId])
  @@map("products")
}

model Variant {
  id                 String               @id() @default(uuid())
  createdAt          DateTime             @default(now()) @map("created_at")
  updatedAt          DateTime             @updatedAt() @map("updated_at")
  name               String
  code               String?
  status             Boolean              @default(true)
  sprice             Float                @map("s_price")
  pprice             Float?               @map("p_price")
  discount           Float?
  dprice             Float?               @map("d_price")
  images             String[]
  tax                Float                @default(0.0)
  product            Product              @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId          String               @map("product_id")
  items              Item[]
  entries            Entry[]
  company            Company              @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId          String               @map("company_id")
  VariantSizeBarcode VariantSizeBarcode[]
  sold               Int?
  writeId            String?              @default(uuid()) @map("write_id")
  cartInTrynbuy      TrynbuyCartItem[]    
  returnedInTrynbuy  TrynbuyReturnedItem[]

  @@index([productId])
  @@index([companyId])
  @@map("variants")
}

model Item {
  id        String   @id() @default(uuid())
  barcode   String?  @db.Text()
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt() @map("updated_at")
  variant   Variant  @relation(fields: [variantId], references: [id], onDelete: Cascade)
  variantId String   @map("variant_id")
  size      String?
  qty       Int?     @default(0)
  entry     Entry[]
  company   Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId String   @map("company_id")
  writeId   String?  @default(uuid()) @map("write_id")

  @@map("items")
}

model Bill {
  id             String        @id() @unique() @default(uuid())
  createdAt      DateTime      @map("created_at")
  invoiceNumber  Int?          @map("invoice_number")
  subtotal       Float?
  discount       Float?
  tax            Float?
  grandTotal     Float?        @map("grand_total")
  returnAmt      Float?        @map("return_Amt")
  deliveryFees   Float?        @map("delivery_fees")
  paymentMethod  String?       @map("payment_method")
  redeemedPoints Int?          @map("redeemed_points")
  billPoints     Int?          @map("bill_points")
  splitPayments  Json?         @map("split_payments")
  paymentStatus  PaymentStatus @default(PENDING) @map("payment_status")
  transactionId  String?       @unique() @map("transaction_id")
  notes          String?
  type           OrderType?
  status         OrderStatus?
  deleted        Boolean?      @default(false)
  bookingDate    DateTime?     @map("booking_date")
  returnDeadline String?       @map("return_deadline")
  entries        Entry[]
  billHistories  BillHistory[]
  company        Company       @relation(fields: [companyId], references: [id])
  companyId      String        @map("company_id")
  account        Account?      @relation(fields: [accountId], references: [id])
  accountId      String?       @map("account_id")
  client         Client?       @relation(fields: [clientId], references: [id])
  clientId       String?       @map("client_id")
  userId         String?       @map("user_id")
  companyUser    CompanyUser?  @relation(fields: [companyId, userId], references: [companyId, userId])
  address        Address?      @relation(fields: [addressId], references: [id])
  addressId      String?       @map("address_id")
  trynbuy        Trynbuy?

  @@index([companyId, createdAt, deleted])
  @@map("bills")
}

model Trynbuy {
  id              String    @id() @default(uuid())
  createdAt       DateTime  @default(now()) @map("created_at")
  checkoutMethod  String    @map("checkout_method")
  subtotal        Float     @map("subtotal")
  productDiscount Float     @map("product_discount")
  totalDiscount   Float     @map("total_discount")
  shipping        Float     @map("shipping")
  deliveryType    String    @map("delivery_type")
  deliveryTime    DateTime? @map("delivery_time")
  deliveryStatus  String?   @map("delivery_status")
  location        Address?  @relation(fields: [locationId], references: [id])
  locationId      String?   @map("location_id")
  cartItems       TrynbuyCartItem[]
  returnedItems   TrynbuyReturnedItem[]
  bill            Bill?     @relation(fields: [billId], references: [id])
  billId          String?   @unique() @map("bill_id")
  client          Client?   @relation(fields: [clientId], references: [id])
  clientId        String?   @map("client_id")
  company         Company   @relation(fields: [companyId], references: [id])
  companyId       String    @map("company_id")
  packingStatus   String?   @map("packing_status")

  @@map("trynbuys")
}


model TrynbuyCartItem {
  id        String   @id() @default(uuid())
  trynbuy   Trynbuy  @relation(fields: [trynbuyId], references: [id])
  trynbuyId String   @map("trynbuy_id")
  variant   Variant  @relation(fields: [variantId], references: [id])
  variantId String   @map("variant_id")

  @@map("trynbuy_cart_items")
}

model TrynbuyReturnedItem {
  id        String   @id() @default(uuid())
  trynbuy   Trynbuy  @relation(fields: [trynbuyId], references: [id])
  trynbuyId String   @map("trynbuy_id")
  variant   Variant  @relation(fields: [variantId], references: [id])
  variantId String   @map("variant_id")

  @@map("trynbuy_returned_items")
}

model Entry {
  id          String       @id() @unique() @default(uuid())
  name        String?
  barcode     String?
  qty         Float?
  rate        Float?
  discount    Float?
  tax         Float?
  value       Float?
  size        String?
  userName    String?
  companyId   String?      @map("company_id")
  userId      String?      @map("user_id")
  companyUser CompanyUser? @relation(fields: [companyId, userId], references: [companyId, userId])
  variant     Variant?     @relation(fields: [variantId], references: [id])
  variantId   String?      @map("variant_id")
  outOfStock  Boolean?     @map("out_of_stock")
  category    Category?    @relation(fields: [categoryId], references: [id])
  categoryId  String?      @map("category_id")
  bill        Bill?        @relation(fields: [billId], references: [id])
  billId      String?      @map("bill_id")
  item        Item?        @relation(fields: [itemId], references: [id])
  itemId      String?      @map("item_id")
  return      Boolean      @default(false) @map("return")

  @@index([billId])
  @@index([variantId])
  @@index([categoryId])
  @@map("entries")
}

model BillHistory {
  id        String   @id() @unique() @default(uuid())
  data      Json
  changedAt DateTime @default(now()) @map("changed_at")
  operation String
  bill      Bill?    @relation(fields: [billId], references: [id], onDelete: Cascade)
  billId    String?  @map("bill_id")

  @@map("bill_history")
}

model Account {
  id        String   @id() @unique() @default(uuid())
  name      String
  phone     String
  bill      Bill[]
  address   Address?
  company   Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId String   @map("company_id")

  @@map("accounts")
}

model TokenEntry {
  id         String   @id() @unique() @default(uuid())
  createdAt  DateTime @map("created_at")
  tokenNo    String   @map("token_no")
  company    Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId  String   @map("company_id")
  itemId     String   @map("item_id")
  variantId  String   @map("variant_id")
  barcode    String
  categoryId String   @map("category_id")
  size       String
  name       String
  qty        Int
  rate       Int
  discount   Int
  tax        Int
  value      Int
  sizes      Json
  totalQty   Int      @map("total_qty")

  @@map("token_entries")
}

model ExpenseCategory {
  id        String    @id() @unique() @default(uuid())
  name      String
  status    Boolean   @default(true)
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt() @map("updated_at")
  expenses  Expense[]
  company   Company   @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId String    @map("company_id")

  @@map("expense_categories")
}

model Expense {
  id                String          @id() @unique() @default(uuid())
  expenseDate       DateTime        @default(now()) @map("expense_date")
  note              String?
  currency          String          @default("INR")
  paymentMode       PaymentMode     @map("payment_mode")
  status            String          @default("Pending")
  receipt           String?
  receiptName       String?         @map("receipt_name")
  taxAmount         Float?          @map("tax_amount")
  totalAmount       Float           @map("total_amount")
  createdAt         DateTime        @default(now()) @map("created_at")
  updatedAt         DateTime        @updatedAt() @map("updated_at")
  expensecategory   ExpenseCategory @relation(fields: [expensecategoryId], references: [id])
  expensecategoryId String          @map("expense_category_id")
  company           Company         @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId         String          @map("company_id")

  @@index([companyId, expenseDate])
  @@map("expenses")
}

model Payment {
  id               String   @id() @unique() @default(uuid())
  paymentDate      DateTime @default(now()) @map("payment_date")
  paymentMode      String   @map("payment_mode")
  paymentReference String?  @map("payment_reference")
  amount           Float
  currency         String   @default("INR")
  status           String   @default("Completed")
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt() @map("updated_at")
  company          Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId        String   @map("company_id")

  @@map("payments")
}

model Address {
  id               String                                @id() @unique() @default(uuid())
  createdAt        DateTime                              @default(now()) @map("created_at")
  updatedAt        DateTime                              @updatedAt() @map("updated_at")
  name             String?
  street           String?
  locality         String?
  landmark         String?
  city             String?
  state            String?
  pincode          String?
  houseDetails     String?
  type             String?
  formattedAddress String?                               @map("formatted_address")
  placeId          String?                               @map("place_id")
  coord            Unsupported("geography(Point,4326)")?
  lat              Float?                                @map("lat")
  lng              Float?                                @map("lng")
  active           Boolean                               @default(true)
  user             User?                                 @relation(fields: [userId], references: [id])
  userId           String?                               @unique() @map("user_id")
  client           Client?                               @relation(fields: [clientId], references: [id])
  clientId         String?                               @map("client_id")
  distributor      Distributor?                          @relation(fields: [distributorId], references: [id])
  distributorId    String?                               @unique() @map("distributor_id")
  company          Company?                              @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId        String?                               @unique() @map("company_id")
  account          Account?                              @relation(fields: [accountId], references: [id])
  accountId        String?                               @unique() @map("account_id")
  bill             Bill[]
  trynbuy          Trynbuy[]

  @@map("addresses")
}

model Conversation {
  id        String               @id() @unique() @default(uuid())
  createdAt DateTime             @default(now()) @map("created_at")
  updatedAt DateTime             @updatedAt() @map("updated_at")
  messages  Message[]
  users     UserConversation[]
  clients   ClientConversation[]

  @@map("conversations")
}

model Message {
  id             String       @id() @unique() @default(uuid())
  createdAt      DateTime     @default(now()) @map("created_at")
  updatedAt      DateTime     @updatedAt() @map("updated_at")
  conversationId String       @map("conversation_id")
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  senderId       String       @map("sender_id")
  text           String
  seen           String[]
  replyto        String?      @map("reply_to")
  edited         Boolean      @default(false)
  deleted        Boolean      @default(false)

  @@map("messages")
}

model CompanyUser {
  companyId String   @map("company_id")
  company   Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  userId    String   @map("user_id")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  code      String?
  phone     String?
  name      String?
  role      UserRole @default(user) @map("role")
  status    Boolean  @default(true)
  deleted   Boolean  @default(false)
  entries   Entry[]
  bills     Bill[]

  @@id([companyId, userId])
  @@unique([companyId, code])
  @@map("company_users")
}

model CompanyClient {
  companyId String  @map("company_id")
  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  clientId  String  @map("client_id")
  client    Client  @relation(fields: [clientId], references: [id], onDelete: Cascade)
  points    Int     @default(0)

  @@id([companyId, clientId])
  @@map("company_clients")
}

model UserConversation {
  userId         String       @map("user_id")
  conversationId String       @map("conversation_id")
  user           User         @relation(fields: [userId], references: [id])
  conversation   Conversation @relation(fields: [conversationId], references: [id])

  @@id([userId, conversationId])
  @@map("user_conversations")
}

model ClientConversation {
  clientId       String       @map("client_id")
  conversationId String       @map("conversation_id")
  client         Client       @relation(fields: [clientId], references: [id])
  conversation   Conversation @relation(fields: [conversationId], references: [id])

  @@id([clientId, conversationId])
  @@map("client_conversations")
}

model UserClient {
  clientId String @map("client_id")
  userId   String @map("user_id")
  client   Client @relation(fields: [clientId], references: [id])
  user     User   @relation(fields: [userId], references: [id])

  @@id([clientId, userId])
  @@map("user_clients")
}

model VariantSizeBarcode {
  id        Int     @id() @default(autoincrement())
  variantId String  @map("variant_id")
  size      String?
  barcode   String  @unique()
  variant   Variant @relation(fields: [variantId], references: [id], onDelete: Cascade)

  @@unique([variantId, size])
  @@map("variant_size_barcodes")
}

model EmailOtp {
  id        String   @id() @unique() @default(uuid())
  email     String   @unique()
  otp       String
  expiresAt DateTime

  @@index([email])
  @@map("email_otp")
}

model Notification {
  id         String           @id() @default(cuid())
  company    Company          @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId  String
  user       User?            @relation(fields: [userId], references: [id])
  userId     String?          @map("user_id")
  clientId   String?          @map("client_id")
  client     Client?          @relation(fields: [clientId], references: [id])
  type       NotificationType
  title      String
  message    String
  read       Boolean          @default(false)
  actionPath String?
  metadata   Json?
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt()

  @@index([companyId])
  @@map("notifications")
}

model PushToken {
  id        String   @id() @unique() @default(uuid())
  userId    String
  token     String
  userAgent String
  deviceId  String
  createdAt DateTime @default(now())

  @@unique([userId, deviceId])
  @@map("push_token")
}

model PromoCode {
  id              String            @id() @default(cuid())
  code            String            @unique()
  discountPercent Int
  minAmount       Float
  expiresAt       DateTime
  isActive        Boolean           @default(true)
  company         Company           @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId       String
  usageLimit      Int?
  usageCount      Int?
  clientsUsed     ClientPromoCode[] @relation("PromoCodeToClientPromoCode")

  @@index([companyId])
  @@map("promo_codes")
}

model ClientPromoCode {
  id          String    @id() @default(cuid())
  clientId    String
  promoCodeId String
  usedAt      DateTime  @default(now())
  client      Client    @relation(fields: [clientId], references: [id])
  promoCode   PromoCode @relation("PromoCodeToClientPromoCode", fields: [promoCodeId], references: [id])

  @@index([promoCodeId])
  @@map("client_promo_code")
}

model Cart {
  id            String             @id() @unique() @default(uuid())
  items         Json?
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt()
  clientCompany CartCompanyClient?

  @@map("cart")
}

model CartCompanyClient {
  clientId  String
  companyId String
  cartId    String  @unique()
  client    Client  @relation(fields: [clientId], references: [id], onDelete: Cascade)
  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  cart      Cart    @relation(fields: [cartId], references: [id])

  @@unique([clientId, companyId])
  @@map("cart_company_client")
}

model Like {
  id            String             @id() @unique() @default(uuid())
  variantIds    String[]           @default([])
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt()
  clientCompany LikeCompanyClient?

  @@index([variantIds], type: Gin)
  @@map("likes")
}

model LikeCompanyClient {
  clientId  String
  companyId String
  likeId    String  @unique()
  client    Client  @relation(fields: [clientId], references: [id], onDelete: Cascade)
  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  like      Like    @relation(fields: [likeId], references: [id])

  @@unique([clientId, companyId])
  @@map("like_company_client")
}
